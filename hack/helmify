#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

# Darwin workaround.
SED_CMD="sed -i"
if [[ "$OSTYPE" == "darwin"* ]]; then
  SED_CMD="sed -i.bak"
fi

TEMPLATES_DIR=$1
PREFIX="{{ include \"manager.fullname\" . }}"

function rename() {
  files=$(git grep --recursive --files-with-matches -e "name: $1" "$TEMPLATES_DIR" | sort | uniq) || true
  for f in $files; do
    echo "renaming $1 -> ${PREFIX}-$1 in $f";
    $SED_CMD "s/name: $1/name: $PREFIX-$1/g" "$f";
  done
}

function rename-file-if-exists() {
  if test -f "$1"; then
      mv "$1" "$2"
  fi
}

# Helmify webhooks.
rename-file-if-exists "$TEMPLATES_DIR/manifests.yaml" "$TEMPLATES_DIR/webhooks.yaml"
$SED_CMD 's/namespace: system/namespace: greenhouse/g' "$TEMPLATES_DIR/webhooks.yaml"
PREFIX="greenhouse" rename "mutating-webhook-configuration"
PREFIX="greenhouse" rename "validating-webhook-configuration"
PREFIX="greenhouse" rename "webhook-service"

# Helmify RBAC.
rename-file-if-exists "$TEMPLATES_DIR/role.yaml" "$TEMPLATES_DIR/manager-role.yaml"
$SED_CMD 's/namespace: system/namespace: {{ .Release.Namespace}}/g' "$TEMPLATES_DIR/manager-role.yaml"
rename "manager-role"

# Cleanup.
find "$TEMPLATES_DIR" -type f -name '*.bak' -exec rm {} \;
