#!/usr/bin/env bash

# SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Greenhouse contributors
# SPDX-License-Identifier: Apache-2.0

set -o errexit
set -o nounset
set -o pipefail

# Require binaries.
if ! command -v kubectl &> /dev/null
then
    echo "kubectl could not be found"
    exit 1
fi

if ! command -v helm &> /dev/null
then
    echo "helm could not be found"
    exit 1
fi

# Directories.
REPO_ROOT="${REPO_ROOT:-$(cd "$(dirname "$0")/.." && pwd)}"
NAMESPACE=greenhouse
KUSTOMIZE_DIR=config/default
HELM_DIR=charts/greenhouse
_spacer=$(printf -- '#%.0s' {1..100})

# Start the installation.
echo -e "${_spacer}

Minimal installer for Greenhouse, the Day-2 operations platform.

Namespace:\t${NAMESPACE}
Kustomize:\t${REPO_ROOT}/${KUSTOMIZE_DIR}
Helm:\t\t${REPO_ROOT}/${HELM_DIR}

${_spacer}
"

echo -e "\nEnsuring namespace ${NAMESPACE} exists."
kubectl create namespace $NAMESPACE || true

echo -e "\nApplying Kustomize from ${REPO_ROOT}/${KUSTOMIZE_DIR}"
kubectl --namespace $NAMESPACE apply --kustomize "${REPO_ROOT}/${KUSTOMIZE_DIR}"

echo -e "\nApplying Helm from ${REPO_ROOT}/${HELM_DIR}"
helm dependency update "${REPO_ROOT}/${HELM_DIR}"
helm upgrade greenhouse "${REPO_ROOT}/${HELM_DIR}" \
  --namespace greenhouse \
  --reset-values \
  --install \
  --set ccloud.enabled=false \
  --set-string image.tag=latest --set-string idproxy.image.tag=latest --set-string cors-proxy.image.tag=latest
  # TODO: Handle additional values files.

# Configure ServiceAccount-based auth for CI.
echo -e "\nConfiguring serviceaccount for CI usage"
kubectl --namespace $NAMESPACE create serviceaccount ci
kubectl --namespace $NAMESPACE apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: ci-token
  annotations:
    kubernetes.io/service-account.name: ci
type: kubernetes.io/service-account-token
EOF
kubectl create clusterrolebinding "${NAMESPACE}:ci" \
  --clusterrole=cluster-admin \
  --serviceaccount=$NAMESPACE:ci

echo -e "
Persisted serviceaccount token in secret ${NAMESPACE}/ci-token.
It can be obtained using: k get secret ci-token -o jsonpath='{.data.token}' | base64 -D
"
