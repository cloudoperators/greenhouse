// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	controllerruntime "sigs.k8s.io/controller-runtime"

	"github.com/cloudoperators/greenhouse/internal/lifecycle"
)

// NewMockReconciler creates a new instance of MockReconciler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReconciler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReconciler {
	mock := &MockReconciler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockReconciler is an autogenerated mock type for the Reconciler type
type MockReconciler struct {
	mock.Mock
}

type MockReconciler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReconciler) EXPECT() *MockReconciler_Expecter {
	return &MockReconciler_Expecter{mock: &_m.Mock}
}

// EnsureCreated provides a mock function for the type MockReconciler
func (_mock *MockReconciler) EnsureCreated(context1 context.Context, runtimeObject lifecycle.RuntimeObject) (controllerruntime.Result, lifecycle.ReconcileResult, error) {
	ret := _mock.Called(context1, runtimeObject)

	if len(ret) == 0 {
		panic("no return value specified for EnsureCreated")
	}

	var r0 controllerruntime.Result
	var r1 lifecycle.ReconcileResult
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, lifecycle.RuntimeObject) (controllerruntime.Result, lifecycle.ReconcileResult, error)); ok {
		return returnFunc(context1, runtimeObject)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, lifecycle.RuntimeObject) controllerruntime.Result); ok {
		r0 = returnFunc(context1, runtimeObject)
	} else {
		r0 = ret.Get(0).(controllerruntime.Result)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, lifecycle.RuntimeObject) lifecycle.ReconcileResult); ok {
		r1 = returnFunc(context1, runtimeObject)
	} else {
		r1 = ret.Get(1).(lifecycle.ReconcileResult)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, lifecycle.RuntimeObject) error); ok {
		r2 = returnFunc(context1, runtimeObject)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockReconciler_EnsureCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureCreated'
type MockReconciler_EnsureCreated_Call struct {
	*mock.Call
}

// EnsureCreated is a helper method to define mock.On call
//   - context1 context.Context
//   - runtimeObject lifecycle.RuntimeObject
func (_e *MockReconciler_Expecter) EnsureCreated(context1 interface{}, runtimeObject interface{}) *MockReconciler_EnsureCreated_Call {
	return &MockReconciler_EnsureCreated_Call{Call: _e.mock.On("EnsureCreated", context1, runtimeObject)}
}

func (_c *MockReconciler_EnsureCreated_Call) Run(run func(context1 context.Context, runtimeObject lifecycle.RuntimeObject)) *MockReconciler_EnsureCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 lifecycle.RuntimeObject
		if args[1] != nil {
			arg1 = args[1].(lifecycle.RuntimeObject)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockReconciler_EnsureCreated_Call) Return(v controllerruntime.Result, reconcileResult lifecycle.ReconcileResult, err error) *MockReconciler_EnsureCreated_Call {
	_c.Call.Return(v, reconcileResult, err)
	return _c
}

func (_c *MockReconciler_EnsureCreated_Call) RunAndReturn(run func(context1 context.Context, runtimeObject lifecycle.RuntimeObject) (controllerruntime.Result, lifecycle.ReconcileResult, error)) *MockReconciler_EnsureCreated_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureDeleted provides a mock function for the type MockReconciler
func (_mock *MockReconciler) EnsureDeleted(context1 context.Context, runtimeObject lifecycle.RuntimeObject) (controllerruntime.Result, lifecycle.ReconcileResult, error) {
	ret := _mock.Called(context1, runtimeObject)

	if len(ret) == 0 {
		panic("no return value specified for EnsureDeleted")
	}

	var r0 controllerruntime.Result
	var r1 lifecycle.ReconcileResult
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, lifecycle.RuntimeObject) (controllerruntime.Result, lifecycle.ReconcileResult, error)); ok {
		return returnFunc(context1, runtimeObject)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, lifecycle.RuntimeObject) controllerruntime.Result); ok {
		r0 = returnFunc(context1, runtimeObject)
	} else {
		r0 = ret.Get(0).(controllerruntime.Result)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, lifecycle.RuntimeObject) lifecycle.ReconcileResult); ok {
		r1 = returnFunc(context1, runtimeObject)
	} else {
		r1 = ret.Get(1).(lifecycle.ReconcileResult)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, lifecycle.RuntimeObject) error); ok {
		r2 = returnFunc(context1, runtimeObject)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockReconciler_EnsureDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureDeleted'
type MockReconciler_EnsureDeleted_Call struct {
	*mock.Call
}

// EnsureDeleted is a helper method to define mock.On call
//   - context1 context.Context
//   - runtimeObject lifecycle.RuntimeObject
func (_e *MockReconciler_Expecter) EnsureDeleted(context1 interface{}, runtimeObject interface{}) *MockReconciler_EnsureDeleted_Call {
	return &MockReconciler_EnsureDeleted_Call{Call: _e.mock.On("EnsureDeleted", context1, runtimeObject)}
}

func (_c *MockReconciler_EnsureDeleted_Call) Run(run func(context1 context.Context, runtimeObject lifecycle.RuntimeObject)) *MockReconciler_EnsureDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 lifecycle.RuntimeObject
		if args[1] != nil {
			arg1 = args[1].(lifecycle.RuntimeObject)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockReconciler_EnsureDeleted_Call) Return(v controllerruntime.Result, reconcileResult lifecycle.ReconcileResult, err error) *MockReconciler_EnsureDeleted_Call {
	_c.Call.Return(v, reconcileResult, err)
	return _c
}

func (_c *MockReconciler_EnsureDeleted_Call) RunAndReturn(run func(context1 context.Context, runtimeObject lifecycle.RuntimeObject) (controllerruntime.Result, lifecycle.ReconcileResult, error)) *MockReconciler_EnsureDeleted_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureSuspended provides a mock function for the type MockReconciler
func (_mock *MockReconciler) EnsureSuspended(context1 context.Context, runtimeObject lifecycle.RuntimeObject) (controllerruntime.Result, error) {
	ret := _mock.Called(context1, runtimeObject)

	if len(ret) == 0 {
		panic("no return value specified for EnsureSuspended")
	}

	var r0 controllerruntime.Result
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, lifecycle.RuntimeObject) (controllerruntime.Result, error)); ok {
		return returnFunc(context1, runtimeObject)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, lifecycle.RuntimeObject) controllerruntime.Result); ok {
		r0 = returnFunc(context1, runtimeObject)
	} else {
		r0 = ret.Get(0).(controllerruntime.Result)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, lifecycle.RuntimeObject) error); ok {
		r1 = returnFunc(context1, runtimeObject)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReconciler_EnsureSuspended_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureSuspended'
type MockReconciler_EnsureSuspended_Call struct {
	*mock.Call
}

// EnsureSuspended is a helper method to define mock.On call
//   - context1 context.Context
//   - runtimeObject lifecycle.RuntimeObject
func (_e *MockReconciler_Expecter) EnsureSuspended(context1 interface{}, runtimeObject interface{}) *MockReconciler_EnsureSuspended_Call {
	return &MockReconciler_EnsureSuspended_Call{Call: _e.mock.On("EnsureSuspended", context1, runtimeObject)}
}

func (_c *MockReconciler_EnsureSuspended_Call) Run(run func(context1 context.Context, runtimeObject lifecycle.RuntimeObject)) *MockReconciler_EnsureSuspended_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 lifecycle.RuntimeObject
		if args[1] != nil {
			arg1 = args[1].(lifecycle.RuntimeObject)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockReconciler_EnsureSuspended_Call) Return(v controllerruntime.Result, err error) *MockReconciler_EnsureSuspended_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockReconciler_EnsureSuspended_Call) RunAndReturn(run func(context1 context.Context, runtimeObject lifecycle.RuntimeObject) (controllerruntime.Result, error)) *MockReconciler_EnsureSuspended_Call {
	_c.Call.Return(run)
	return _c
}
