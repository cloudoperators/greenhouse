// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/dexidp/dex/storage"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockStorage
func (_mock *MockStorage) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockStorage_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockStorage_Expecter) Close() *MockStorage_Close_Call {
	return &MockStorage_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockStorage_Close_Call) Run(run func()) *MockStorage_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_Close_Call) Return(err error) *MockStorage_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_Close_Call) RunAndReturn(run func() error) *MockStorage_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAuthCode provides a mock function for the type MockStorage
func (_mock *MockStorage) CreateAuthCode(ctx context.Context, c storage.AuthCode) error {
	ret := _mock.Called(ctx, c)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthCode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.AuthCode) error); ok {
		r0 = returnFunc(ctx, c)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_CreateAuthCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthCode'
type MockStorage_CreateAuthCode_Call struct {
	*mock.Call
}

// CreateAuthCode is a helper method to define mock.On call
//   - ctx context.Context
//   - c storage.AuthCode
func (_e *MockStorage_Expecter) CreateAuthCode(ctx interface{}, c interface{}) *MockStorage_CreateAuthCode_Call {
	return &MockStorage_CreateAuthCode_Call{Call: _e.mock.On("CreateAuthCode", ctx, c)}
}

func (_c *MockStorage_CreateAuthCode_Call) Run(run func(ctx context.Context, c storage.AuthCode)) *MockStorage_CreateAuthCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 storage.AuthCode
		if args[1] != nil {
			arg1 = args[1].(storage.AuthCode)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_CreateAuthCode_Call) Return(err error) *MockStorage_CreateAuthCode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_CreateAuthCode_Call) RunAndReturn(run func(ctx context.Context, c storage.AuthCode) error) *MockStorage_CreateAuthCode_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAuthRequest provides a mock function for the type MockStorage
func (_mock *MockStorage) CreateAuthRequest(ctx context.Context, a storage.AuthRequest) error {
	ret := _mock.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthRequest")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.AuthRequest) error); ok {
		r0 = returnFunc(ctx, a)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_CreateAuthRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthRequest'
type MockStorage_CreateAuthRequest_Call struct {
	*mock.Call
}

// CreateAuthRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - a storage.AuthRequest
func (_e *MockStorage_Expecter) CreateAuthRequest(ctx interface{}, a interface{}) *MockStorage_CreateAuthRequest_Call {
	return &MockStorage_CreateAuthRequest_Call{Call: _e.mock.On("CreateAuthRequest", ctx, a)}
}

func (_c *MockStorage_CreateAuthRequest_Call) Run(run func(ctx context.Context, a storage.AuthRequest)) *MockStorage_CreateAuthRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 storage.AuthRequest
		if args[1] != nil {
			arg1 = args[1].(storage.AuthRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_CreateAuthRequest_Call) Return(err error) *MockStorage_CreateAuthRequest_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_CreateAuthRequest_Call) RunAndReturn(run func(ctx context.Context, a storage.AuthRequest) error) *MockStorage_CreateAuthRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClient provides a mock function for the type MockStorage
func (_mock *MockStorage) CreateClient(ctx context.Context, c storage.Client) error {
	ret := _mock.Called(ctx, c)

	if len(ret) == 0 {
		panic("no return value specified for CreateClient")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.Client) error); ok {
		r0 = returnFunc(ctx, c)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_CreateClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClient'
type MockStorage_CreateClient_Call struct {
	*mock.Call
}

// CreateClient is a helper method to define mock.On call
//   - ctx context.Context
//   - c storage.Client
func (_e *MockStorage_Expecter) CreateClient(ctx interface{}, c interface{}) *MockStorage_CreateClient_Call {
	return &MockStorage_CreateClient_Call{Call: _e.mock.On("CreateClient", ctx, c)}
}

func (_c *MockStorage_CreateClient_Call) Run(run func(ctx context.Context, c storage.Client)) *MockStorage_CreateClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 storage.Client
		if args[1] != nil {
			arg1 = args[1].(storage.Client)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_CreateClient_Call) Return(err error) *MockStorage_CreateClient_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_CreateClient_Call) RunAndReturn(run func(ctx context.Context, c storage.Client) error) *MockStorage_CreateClient_Call {
	_c.Call.Return(run)
	return _c
}

// CreateConnector provides a mock function for the type MockStorage
func (_mock *MockStorage) CreateConnector(ctx context.Context, c storage.Connector) error {
	ret := _mock.Called(ctx, c)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnector")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.Connector) error); ok {
		r0 = returnFunc(ctx, c)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_CreateConnector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConnector'
type MockStorage_CreateConnector_Call struct {
	*mock.Call
}

// CreateConnector is a helper method to define mock.On call
//   - ctx context.Context
//   - c storage.Connector
func (_e *MockStorage_Expecter) CreateConnector(ctx interface{}, c interface{}) *MockStorage_CreateConnector_Call {
	return &MockStorage_CreateConnector_Call{Call: _e.mock.On("CreateConnector", ctx, c)}
}

func (_c *MockStorage_CreateConnector_Call) Run(run func(ctx context.Context, c storage.Connector)) *MockStorage_CreateConnector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 storage.Connector
		if args[1] != nil {
			arg1 = args[1].(storage.Connector)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_CreateConnector_Call) Return(err error) *MockStorage_CreateConnector_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_CreateConnector_Call) RunAndReturn(run func(ctx context.Context, c storage.Connector) error) *MockStorage_CreateConnector_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDeviceRequest provides a mock function for the type MockStorage
func (_mock *MockStorage) CreateDeviceRequest(ctx context.Context, d storage.DeviceRequest) error {
	ret := _mock.Called(ctx, d)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeviceRequest")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.DeviceRequest) error); ok {
		r0 = returnFunc(ctx, d)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_CreateDeviceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeviceRequest'
type MockStorage_CreateDeviceRequest_Call struct {
	*mock.Call
}

// CreateDeviceRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - d storage.DeviceRequest
func (_e *MockStorage_Expecter) CreateDeviceRequest(ctx interface{}, d interface{}) *MockStorage_CreateDeviceRequest_Call {
	return &MockStorage_CreateDeviceRequest_Call{Call: _e.mock.On("CreateDeviceRequest", ctx, d)}
}

func (_c *MockStorage_CreateDeviceRequest_Call) Run(run func(ctx context.Context, d storage.DeviceRequest)) *MockStorage_CreateDeviceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 storage.DeviceRequest
		if args[1] != nil {
			arg1 = args[1].(storage.DeviceRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_CreateDeviceRequest_Call) Return(err error) *MockStorage_CreateDeviceRequest_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_CreateDeviceRequest_Call) RunAndReturn(run func(ctx context.Context, d storage.DeviceRequest) error) *MockStorage_CreateDeviceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDeviceToken provides a mock function for the type MockStorage
func (_mock *MockStorage) CreateDeviceToken(ctx context.Context, d storage.DeviceToken) error {
	ret := _mock.Called(ctx, d)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeviceToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.DeviceToken) error); ok {
		r0 = returnFunc(ctx, d)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_CreateDeviceToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeviceToken'
type MockStorage_CreateDeviceToken_Call struct {
	*mock.Call
}

// CreateDeviceToken is a helper method to define mock.On call
//   - ctx context.Context
//   - d storage.DeviceToken
func (_e *MockStorage_Expecter) CreateDeviceToken(ctx interface{}, d interface{}) *MockStorage_CreateDeviceToken_Call {
	return &MockStorage_CreateDeviceToken_Call{Call: _e.mock.On("CreateDeviceToken", ctx, d)}
}

func (_c *MockStorage_CreateDeviceToken_Call) Run(run func(ctx context.Context, d storage.DeviceToken)) *MockStorage_CreateDeviceToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 storage.DeviceToken
		if args[1] != nil {
			arg1 = args[1].(storage.DeviceToken)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_CreateDeviceToken_Call) Return(err error) *MockStorage_CreateDeviceToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_CreateDeviceToken_Call) RunAndReturn(run func(ctx context.Context, d storage.DeviceToken) error) *MockStorage_CreateDeviceToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOfflineSessions provides a mock function for the type MockStorage
func (_mock *MockStorage) CreateOfflineSessions(ctx context.Context, s storage.OfflineSessions) error {
	ret := _mock.Called(ctx, s)

	if len(ret) == 0 {
		panic("no return value specified for CreateOfflineSessions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.OfflineSessions) error); ok {
		r0 = returnFunc(ctx, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_CreateOfflineSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOfflineSessions'
type MockStorage_CreateOfflineSessions_Call struct {
	*mock.Call
}

// CreateOfflineSessions is a helper method to define mock.On call
//   - ctx context.Context
//   - s storage.OfflineSessions
func (_e *MockStorage_Expecter) CreateOfflineSessions(ctx interface{}, s interface{}) *MockStorage_CreateOfflineSessions_Call {
	return &MockStorage_CreateOfflineSessions_Call{Call: _e.mock.On("CreateOfflineSessions", ctx, s)}
}

func (_c *MockStorage_CreateOfflineSessions_Call) Run(run func(ctx context.Context, s storage.OfflineSessions)) *MockStorage_CreateOfflineSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 storage.OfflineSessions
		if args[1] != nil {
			arg1 = args[1].(storage.OfflineSessions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_CreateOfflineSessions_Call) Return(err error) *MockStorage_CreateOfflineSessions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_CreateOfflineSessions_Call) RunAndReturn(run func(ctx context.Context, s storage.OfflineSessions) error) *MockStorage_CreateOfflineSessions_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePassword provides a mock function for the type MockStorage
func (_mock *MockStorage) CreatePassword(ctx context.Context, p storage.Password) error {
	ret := _mock.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for CreatePassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.Password) error); ok {
		r0 = returnFunc(ctx, p)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_CreatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePassword'
type MockStorage_CreatePassword_Call struct {
	*mock.Call
}

// CreatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - p storage.Password
func (_e *MockStorage_Expecter) CreatePassword(ctx interface{}, p interface{}) *MockStorage_CreatePassword_Call {
	return &MockStorage_CreatePassword_Call{Call: _e.mock.On("CreatePassword", ctx, p)}
}

func (_c *MockStorage_CreatePassword_Call) Run(run func(ctx context.Context, p storage.Password)) *MockStorage_CreatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 storage.Password
		if args[1] != nil {
			arg1 = args[1].(storage.Password)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_CreatePassword_Call) Return(err error) *MockStorage_CreatePassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_CreatePassword_Call) RunAndReturn(run func(ctx context.Context, p storage.Password) error) *MockStorage_CreatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRefresh provides a mock function for the type MockStorage
func (_mock *MockStorage) CreateRefresh(ctx context.Context, r storage.RefreshToken) error {
	ret := _mock.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefresh")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.RefreshToken) error); ok {
		r0 = returnFunc(ctx, r)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_CreateRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRefresh'
type MockStorage_CreateRefresh_Call struct {
	*mock.Call
}

// CreateRefresh is a helper method to define mock.On call
//   - ctx context.Context
//   - r storage.RefreshToken
func (_e *MockStorage_Expecter) CreateRefresh(ctx interface{}, r interface{}) *MockStorage_CreateRefresh_Call {
	return &MockStorage_CreateRefresh_Call{Call: _e.mock.On("CreateRefresh", ctx, r)}
}

func (_c *MockStorage_CreateRefresh_Call) Run(run func(ctx context.Context, r storage.RefreshToken)) *MockStorage_CreateRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 storage.RefreshToken
		if args[1] != nil {
			arg1 = args[1].(storage.RefreshToken)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_CreateRefresh_Call) Return(err error) *MockStorage_CreateRefresh_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_CreateRefresh_Call) RunAndReturn(run func(ctx context.Context, r storage.RefreshToken) error) *MockStorage_CreateRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAuthCode provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteAuthCode(ctx context.Context, code string) error {
	ret := _mock.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAuthCode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, code)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteAuthCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAuthCode'
type MockStorage_DeleteAuthCode_Call struct {
	*mock.Call
}

// DeleteAuthCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *MockStorage_Expecter) DeleteAuthCode(ctx interface{}, code interface{}) *MockStorage_DeleteAuthCode_Call {
	return &MockStorage_DeleteAuthCode_Call{Call: _e.mock.On("DeleteAuthCode", ctx, code)}
}

func (_c *MockStorage_DeleteAuthCode_Call) Run(run func(ctx context.Context, code string)) *MockStorage_DeleteAuthCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteAuthCode_Call) Return(err error) *MockStorage_DeleteAuthCode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteAuthCode_Call) RunAndReturn(run func(ctx context.Context, code string) error) *MockStorage_DeleteAuthCode_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAuthRequest provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteAuthRequest(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAuthRequest")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteAuthRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAuthRequest'
type MockStorage_DeleteAuthRequest_Call struct {
	*mock.Call
}

// DeleteAuthRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockStorage_Expecter) DeleteAuthRequest(ctx interface{}, id interface{}) *MockStorage_DeleteAuthRequest_Call {
	return &MockStorage_DeleteAuthRequest_Call{Call: _e.mock.On("DeleteAuthRequest", ctx, id)}
}

func (_c *MockStorage_DeleteAuthRequest_Call) Run(run func(ctx context.Context, id string)) *MockStorage_DeleteAuthRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteAuthRequest_Call) Return(err error) *MockStorage_DeleteAuthRequest_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteAuthRequest_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockStorage_DeleteAuthRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClient provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteClient(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClient")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClient'
type MockStorage_DeleteClient_Call struct {
	*mock.Call
}

// DeleteClient is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockStorage_Expecter) DeleteClient(ctx interface{}, id interface{}) *MockStorage_DeleteClient_Call {
	return &MockStorage_DeleteClient_Call{Call: _e.mock.On("DeleteClient", ctx, id)}
}

func (_c *MockStorage_DeleteClient_Call) Run(run func(ctx context.Context, id string)) *MockStorage_DeleteClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteClient_Call) Return(err error) *MockStorage_DeleteClient_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteClient_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockStorage_DeleteClient_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteConnector provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteConnector(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnector")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteConnector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConnector'
type MockStorage_DeleteConnector_Call struct {
	*mock.Call
}

// DeleteConnector is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockStorage_Expecter) DeleteConnector(ctx interface{}, id interface{}) *MockStorage_DeleteConnector_Call {
	return &MockStorage_DeleteConnector_Call{Call: _e.mock.On("DeleteConnector", ctx, id)}
}

func (_c *MockStorage_DeleteConnector_Call) Run(run func(ctx context.Context, id string)) *MockStorage_DeleteConnector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteConnector_Call) Return(err error) *MockStorage_DeleteConnector_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteConnector_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockStorage_DeleteConnector_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOfflineSessions provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteOfflineSessions(ctx context.Context, userID string, connID string) error {
	ret := _mock.Called(ctx, userID, connID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOfflineSessions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, userID, connID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteOfflineSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOfflineSessions'
type MockStorage_DeleteOfflineSessions_Call struct {
	*mock.Call
}

// DeleteOfflineSessions is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - connID string
func (_e *MockStorage_Expecter) DeleteOfflineSessions(ctx interface{}, userID interface{}, connID interface{}) *MockStorage_DeleteOfflineSessions_Call {
	return &MockStorage_DeleteOfflineSessions_Call{Call: _e.mock.On("DeleteOfflineSessions", ctx, userID, connID)}
}

func (_c *MockStorage_DeleteOfflineSessions_Call) Run(run func(ctx context.Context, userID string, connID string)) *MockStorage_DeleteOfflineSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteOfflineSessions_Call) Return(err error) *MockStorage_DeleteOfflineSessions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteOfflineSessions_Call) RunAndReturn(run func(ctx context.Context, userID string, connID string) error) *MockStorage_DeleteOfflineSessions_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePassword provides a mock function for the type MockStorage
func (_mock *MockStorage) DeletePassword(ctx context.Context, email string) error {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for DeletePassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeletePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePassword'
type MockStorage_DeletePassword_Call struct {
	*mock.Call
}

// DeletePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockStorage_Expecter) DeletePassword(ctx interface{}, email interface{}) *MockStorage_DeletePassword_Call {
	return &MockStorage_DeletePassword_Call{Call: _e.mock.On("DeletePassword", ctx, email)}
}

func (_c *MockStorage_DeletePassword_Call) Run(run func(ctx context.Context, email string)) *MockStorage_DeletePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_DeletePassword_Call) Return(err error) *MockStorage_DeletePassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeletePassword_Call) RunAndReturn(run func(ctx context.Context, email string) error) *MockStorage_DeletePassword_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRefresh provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteRefresh(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRefresh")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRefresh'
type MockStorage_DeleteRefresh_Call struct {
	*mock.Call
}

// DeleteRefresh is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockStorage_Expecter) DeleteRefresh(ctx interface{}, id interface{}) *MockStorage_DeleteRefresh_Call {
	return &MockStorage_DeleteRefresh_Call{Call: _e.mock.On("DeleteRefresh", ctx, id)}
}

func (_c *MockStorage_DeleteRefresh_Call) Run(run func(ctx context.Context, id string)) *MockStorage_DeleteRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteRefresh_Call) Return(err error) *MockStorage_DeleteRefresh_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteRefresh_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockStorage_DeleteRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// GarbageCollect provides a mock function for the type MockStorage
func (_mock *MockStorage) GarbageCollect(ctx context.Context, now time.Time) (storage.GCResult, error) {
	ret := _mock.Called(ctx, now)

	if len(ret) == 0 {
		panic("no return value specified for GarbageCollect")
	}

	var r0 storage.GCResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) (storage.GCResult, error)); ok {
		return returnFunc(ctx, now)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) storage.GCResult); ok {
		r0 = returnFunc(ctx, now)
	} else {
		r0 = ret.Get(0).(storage.GCResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = returnFunc(ctx, now)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GarbageCollect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GarbageCollect'
type MockStorage_GarbageCollect_Call struct {
	*mock.Call
}

// GarbageCollect is a helper method to define mock.On call
//   - ctx context.Context
//   - now time.Time
func (_e *MockStorage_Expecter) GarbageCollect(ctx interface{}, now interface{}) *MockStorage_GarbageCollect_Call {
	return &MockStorage_GarbageCollect_Call{Call: _e.mock.On("GarbageCollect", ctx, now)}
}

func (_c *MockStorage_GarbageCollect_Call) Run(run func(ctx context.Context, now time.Time)) *MockStorage_GarbageCollect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_GarbageCollect_Call) Return(gCResult storage.GCResult, err error) *MockStorage_GarbageCollect_Call {
	_c.Call.Return(gCResult, err)
	return _c
}

func (_c *MockStorage_GarbageCollect_Call) RunAndReturn(run func(ctx context.Context, now time.Time) (storage.GCResult, error)) *MockStorage_GarbageCollect_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthCode provides a mock function for the type MockStorage
func (_mock *MockStorage) GetAuthCode(ctx context.Context, id string) (storage.AuthCode, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthCode")
	}

	var r0 storage.AuthCode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (storage.AuthCode, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) storage.AuthCode); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(storage.AuthCode)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GetAuthCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthCode'
type MockStorage_GetAuthCode_Call struct {
	*mock.Call
}

// GetAuthCode is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockStorage_Expecter) GetAuthCode(ctx interface{}, id interface{}) *MockStorage_GetAuthCode_Call {
	return &MockStorage_GetAuthCode_Call{Call: _e.mock.On("GetAuthCode", ctx, id)}
}

func (_c *MockStorage_GetAuthCode_Call) Run(run func(ctx context.Context, id string)) *MockStorage_GetAuthCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_GetAuthCode_Call) Return(authCode storage.AuthCode, err error) *MockStorage_GetAuthCode_Call {
	_c.Call.Return(authCode, err)
	return _c
}

func (_c *MockStorage_GetAuthCode_Call) RunAndReturn(run func(ctx context.Context, id string) (storage.AuthCode, error)) *MockStorage_GetAuthCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthRequest provides a mock function for the type MockStorage
func (_mock *MockStorage) GetAuthRequest(ctx context.Context, id string) (storage.AuthRequest, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthRequest")
	}

	var r0 storage.AuthRequest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (storage.AuthRequest, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) storage.AuthRequest); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(storage.AuthRequest)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GetAuthRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthRequest'
type MockStorage_GetAuthRequest_Call struct {
	*mock.Call
}

// GetAuthRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockStorage_Expecter) GetAuthRequest(ctx interface{}, id interface{}) *MockStorage_GetAuthRequest_Call {
	return &MockStorage_GetAuthRequest_Call{Call: _e.mock.On("GetAuthRequest", ctx, id)}
}

func (_c *MockStorage_GetAuthRequest_Call) Run(run func(ctx context.Context, id string)) *MockStorage_GetAuthRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_GetAuthRequest_Call) Return(authRequest storage.AuthRequest, err error) *MockStorage_GetAuthRequest_Call {
	_c.Call.Return(authRequest, err)
	return _c
}

func (_c *MockStorage_GetAuthRequest_Call) RunAndReturn(run func(ctx context.Context, id string) (storage.AuthRequest, error)) *MockStorage_GetAuthRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetClient provides a mock function for the type MockStorage
func (_mock *MockStorage) GetClient(ctx context.Context, id string) (storage.Client, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 storage.Client
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (storage.Client, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) storage.Client); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(storage.Client)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClient'
type MockStorage_GetClient_Call struct {
	*mock.Call
}

// GetClient is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockStorage_Expecter) GetClient(ctx interface{}, id interface{}) *MockStorage_GetClient_Call {
	return &MockStorage_GetClient_Call{Call: _e.mock.On("GetClient", ctx, id)}
}

func (_c *MockStorage_GetClient_Call) Run(run func(ctx context.Context, id string)) *MockStorage_GetClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_GetClient_Call) Return(client storage.Client, err error) *MockStorage_GetClient_Call {
	_c.Call.Return(client, err)
	return _c
}

func (_c *MockStorage_GetClient_Call) RunAndReturn(run func(ctx context.Context, id string) (storage.Client, error)) *MockStorage_GetClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnector provides a mock function for the type MockStorage
func (_mock *MockStorage) GetConnector(ctx context.Context, id string) (storage.Connector, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetConnector")
	}

	var r0 storage.Connector
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (storage.Connector, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) storage.Connector); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(storage.Connector)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GetConnector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnector'
type MockStorage_GetConnector_Call struct {
	*mock.Call
}

// GetConnector is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockStorage_Expecter) GetConnector(ctx interface{}, id interface{}) *MockStorage_GetConnector_Call {
	return &MockStorage_GetConnector_Call{Call: _e.mock.On("GetConnector", ctx, id)}
}

func (_c *MockStorage_GetConnector_Call) Run(run func(ctx context.Context, id string)) *MockStorage_GetConnector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_GetConnector_Call) Return(connector storage.Connector, err error) *MockStorage_GetConnector_Call {
	_c.Call.Return(connector, err)
	return _c
}

func (_c *MockStorage_GetConnector_Call) RunAndReturn(run func(ctx context.Context, id string) (storage.Connector, error)) *MockStorage_GetConnector_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceRequest provides a mock function for the type MockStorage
func (_mock *MockStorage) GetDeviceRequest(ctx context.Context, userCode string) (storage.DeviceRequest, error) {
	ret := _mock.Called(ctx, userCode)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceRequest")
	}

	var r0 storage.DeviceRequest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (storage.DeviceRequest, error)); ok {
		return returnFunc(ctx, userCode)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) storage.DeviceRequest); ok {
		r0 = returnFunc(ctx, userCode)
	} else {
		r0 = ret.Get(0).(storage.DeviceRequest)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userCode)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GetDeviceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceRequest'
type MockStorage_GetDeviceRequest_Call struct {
	*mock.Call
}

// GetDeviceRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - userCode string
func (_e *MockStorage_Expecter) GetDeviceRequest(ctx interface{}, userCode interface{}) *MockStorage_GetDeviceRequest_Call {
	return &MockStorage_GetDeviceRequest_Call{Call: _e.mock.On("GetDeviceRequest", ctx, userCode)}
}

func (_c *MockStorage_GetDeviceRequest_Call) Run(run func(ctx context.Context, userCode string)) *MockStorage_GetDeviceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_GetDeviceRequest_Call) Return(deviceRequest storage.DeviceRequest, err error) *MockStorage_GetDeviceRequest_Call {
	_c.Call.Return(deviceRequest, err)
	return _c
}

func (_c *MockStorage_GetDeviceRequest_Call) RunAndReturn(run func(ctx context.Context, userCode string) (storage.DeviceRequest, error)) *MockStorage_GetDeviceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceToken provides a mock function for the type MockStorage
func (_mock *MockStorage) GetDeviceToken(ctx context.Context, deviceCode string) (storage.DeviceToken, error) {
	ret := _mock.Called(ctx, deviceCode)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceToken")
	}

	var r0 storage.DeviceToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (storage.DeviceToken, error)); ok {
		return returnFunc(ctx, deviceCode)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) storage.DeviceToken); ok {
		r0 = returnFunc(ctx, deviceCode)
	} else {
		r0 = ret.Get(0).(storage.DeviceToken)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, deviceCode)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GetDeviceToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceToken'
type MockStorage_GetDeviceToken_Call struct {
	*mock.Call
}

// GetDeviceToken is a helper method to define mock.On call
//   - ctx context.Context
//   - deviceCode string
func (_e *MockStorage_Expecter) GetDeviceToken(ctx interface{}, deviceCode interface{}) *MockStorage_GetDeviceToken_Call {
	return &MockStorage_GetDeviceToken_Call{Call: _e.mock.On("GetDeviceToken", ctx, deviceCode)}
}

func (_c *MockStorage_GetDeviceToken_Call) Run(run func(ctx context.Context, deviceCode string)) *MockStorage_GetDeviceToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_GetDeviceToken_Call) Return(deviceToken storage.DeviceToken, err error) *MockStorage_GetDeviceToken_Call {
	_c.Call.Return(deviceToken, err)
	return _c
}

func (_c *MockStorage_GetDeviceToken_Call) RunAndReturn(run func(ctx context.Context, deviceCode string) (storage.DeviceToken, error)) *MockStorage_GetDeviceToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetKeys provides a mock function for the type MockStorage
func (_mock *MockStorage) GetKeys(ctx context.Context) (storage.Keys, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetKeys")
	}

	var r0 storage.Keys
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (storage.Keys, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) storage.Keys); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(storage.Keys)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GetKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeys'
type MockStorage_GetKeys_Call struct {
	*mock.Call
}

// GetKeys is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorage_Expecter) GetKeys(ctx interface{}) *MockStorage_GetKeys_Call {
	return &MockStorage_GetKeys_Call{Call: _e.mock.On("GetKeys", ctx)}
}

func (_c *MockStorage_GetKeys_Call) Run(run func(ctx context.Context)) *MockStorage_GetKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_GetKeys_Call) Return(keys storage.Keys, err error) *MockStorage_GetKeys_Call {
	_c.Call.Return(keys, err)
	return _c
}

func (_c *MockStorage_GetKeys_Call) RunAndReturn(run func(ctx context.Context) (storage.Keys, error)) *MockStorage_GetKeys_Call {
	_c.Call.Return(run)
	return _c
}

// GetOfflineSessions provides a mock function for the type MockStorage
func (_mock *MockStorage) GetOfflineSessions(ctx context.Context, userID string, connID string) (storage.OfflineSessions, error) {
	ret := _mock.Called(ctx, userID, connID)

	if len(ret) == 0 {
		panic("no return value specified for GetOfflineSessions")
	}

	var r0 storage.OfflineSessions
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (storage.OfflineSessions, error)); ok {
		return returnFunc(ctx, userID, connID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) storage.OfflineSessions); ok {
		r0 = returnFunc(ctx, userID, connID)
	} else {
		r0 = ret.Get(0).(storage.OfflineSessions)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, userID, connID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GetOfflineSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOfflineSessions'
type MockStorage_GetOfflineSessions_Call struct {
	*mock.Call
}

// GetOfflineSessions is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - connID string
func (_e *MockStorage_Expecter) GetOfflineSessions(ctx interface{}, userID interface{}, connID interface{}) *MockStorage_GetOfflineSessions_Call {
	return &MockStorage_GetOfflineSessions_Call{Call: _e.mock.On("GetOfflineSessions", ctx, userID, connID)}
}

func (_c *MockStorage_GetOfflineSessions_Call) Run(run func(ctx context.Context, userID string, connID string)) *MockStorage_GetOfflineSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorage_GetOfflineSessions_Call) Return(offlineSessions storage.OfflineSessions, err error) *MockStorage_GetOfflineSessions_Call {
	_c.Call.Return(offlineSessions, err)
	return _c
}

func (_c *MockStorage_GetOfflineSessions_Call) RunAndReturn(run func(ctx context.Context, userID string, connID string) (storage.OfflineSessions, error)) *MockStorage_GetOfflineSessions_Call {
	_c.Call.Return(run)
	return _c
}

// GetPassword provides a mock function for the type MockStorage
func (_mock *MockStorage) GetPassword(ctx context.Context, email string) (storage.Password, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetPassword")
	}

	var r0 storage.Password
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (storage.Password, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) storage.Password); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(storage.Password)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPassword'
type MockStorage_GetPassword_Call struct {
	*mock.Call
}

// GetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockStorage_Expecter) GetPassword(ctx interface{}, email interface{}) *MockStorage_GetPassword_Call {
	return &MockStorage_GetPassword_Call{Call: _e.mock.On("GetPassword", ctx, email)}
}

func (_c *MockStorage_GetPassword_Call) Run(run func(ctx context.Context, email string)) *MockStorage_GetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_GetPassword_Call) Return(password storage.Password, err error) *MockStorage_GetPassword_Call {
	_c.Call.Return(password, err)
	return _c
}

func (_c *MockStorage_GetPassword_Call) RunAndReturn(run func(ctx context.Context, email string) (storage.Password, error)) *MockStorage_GetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefresh provides a mock function for the type MockStorage
func (_mock *MockStorage) GetRefresh(ctx context.Context, id string) (storage.RefreshToken, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRefresh")
	}

	var r0 storage.RefreshToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (storage.RefreshToken, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) storage.RefreshToken); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(storage.RefreshToken)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GetRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefresh'
type MockStorage_GetRefresh_Call struct {
	*mock.Call
}

// GetRefresh is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockStorage_Expecter) GetRefresh(ctx interface{}, id interface{}) *MockStorage_GetRefresh_Call {
	return &MockStorage_GetRefresh_Call{Call: _e.mock.On("GetRefresh", ctx, id)}
}

func (_c *MockStorage_GetRefresh_Call) Run(run func(ctx context.Context, id string)) *MockStorage_GetRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_GetRefresh_Call) Return(refreshToken storage.RefreshToken, err error) *MockStorage_GetRefresh_Call {
	_c.Call.Return(refreshToken, err)
	return _c
}

func (_c *MockStorage_GetRefresh_Call) RunAndReturn(run func(ctx context.Context, id string) (storage.RefreshToken, error)) *MockStorage_GetRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// ListClients provides a mock function for the type MockStorage
func (_mock *MockStorage) ListClients(ctx context.Context) ([]storage.Client, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListClients")
	}

	var r0 []storage.Client
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]storage.Client, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []storage.Client); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Client)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_ListClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClients'
type MockStorage_ListClients_Call struct {
	*mock.Call
}

// ListClients is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorage_Expecter) ListClients(ctx interface{}) *MockStorage_ListClients_Call {
	return &MockStorage_ListClients_Call{Call: _e.mock.On("ListClients", ctx)}
}

func (_c *MockStorage_ListClients_Call) Run(run func(ctx context.Context)) *MockStorage_ListClients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_ListClients_Call) Return(clients []storage.Client, err error) *MockStorage_ListClients_Call {
	_c.Call.Return(clients, err)
	return _c
}

func (_c *MockStorage_ListClients_Call) RunAndReturn(run func(ctx context.Context) ([]storage.Client, error)) *MockStorage_ListClients_Call {
	_c.Call.Return(run)
	return _c
}

// ListConnectors provides a mock function for the type MockStorage
func (_mock *MockStorage) ListConnectors(ctx context.Context) ([]storage.Connector, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectors")
	}

	var r0 []storage.Connector
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]storage.Connector, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []storage.Connector); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Connector)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_ListConnectors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConnectors'
type MockStorage_ListConnectors_Call struct {
	*mock.Call
}

// ListConnectors is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorage_Expecter) ListConnectors(ctx interface{}) *MockStorage_ListConnectors_Call {
	return &MockStorage_ListConnectors_Call{Call: _e.mock.On("ListConnectors", ctx)}
}

func (_c *MockStorage_ListConnectors_Call) Run(run func(ctx context.Context)) *MockStorage_ListConnectors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_ListConnectors_Call) Return(connectors []storage.Connector, err error) *MockStorage_ListConnectors_Call {
	_c.Call.Return(connectors, err)
	return _c
}

func (_c *MockStorage_ListConnectors_Call) RunAndReturn(run func(ctx context.Context) ([]storage.Connector, error)) *MockStorage_ListConnectors_Call {
	_c.Call.Return(run)
	return _c
}

// ListPasswords provides a mock function for the type MockStorage
func (_mock *MockStorage) ListPasswords(ctx context.Context) ([]storage.Password, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListPasswords")
	}

	var r0 []storage.Password
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]storage.Password, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []storage.Password); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Password)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_ListPasswords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPasswords'
type MockStorage_ListPasswords_Call struct {
	*mock.Call
}

// ListPasswords is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorage_Expecter) ListPasswords(ctx interface{}) *MockStorage_ListPasswords_Call {
	return &MockStorage_ListPasswords_Call{Call: _e.mock.On("ListPasswords", ctx)}
}

func (_c *MockStorage_ListPasswords_Call) Run(run func(ctx context.Context)) *MockStorage_ListPasswords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_ListPasswords_Call) Return(passwords []storage.Password, err error) *MockStorage_ListPasswords_Call {
	_c.Call.Return(passwords, err)
	return _c
}

func (_c *MockStorage_ListPasswords_Call) RunAndReturn(run func(ctx context.Context) ([]storage.Password, error)) *MockStorage_ListPasswords_Call {
	_c.Call.Return(run)
	return _c
}

// ListRefreshTokens provides a mock function for the type MockStorage
func (_mock *MockStorage) ListRefreshTokens(ctx context.Context) ([]storage.RefreshToken, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListRefreshTokens")
	}

	var r0 []storage.RefreshToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]storage.RefreshToken, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []storage.RefreshToken); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.RefreshToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_ListRefreshTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRefreshTokens'
type MockStorage_ListRefreshTokens_Call struct {
	*mock.Call
}

// ListRefreshTokens is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorage_Expecter) ListRefreshTokens(ctx interface{}) *MockStorage_ListRefreshTokens_Call {
	return &MockStorage_ListRefreshTokens_Call{Call: _e.mock.On("ListRefreshTokens", ctx)}
}

func (_c *MockStorage_ListRefreshTokens_Call) Run(run func(ctx context.Context)) *MockStorage_ListRefreshTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_ListRefreshTokens_Call) Return(refreshTokens []storage.RefreshToken, err error) *MockStorage_ListRefreshTokens_Call {
	_c.Call.Return(refreshTokens, err)
	return _c
}

func (_c *MockStorage_ListRefreshTokens_Call) RunAndReturn(run func(ctx context.Context) ([]storage.RefreshToken, error)) *MockStorage_ListRefreshTokens_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAuthRequest provides a mock function for the type MockStorage
func (_mock *MockStorage) UpdateAuthRequest(ctx context.Context, id string, updater func(a storage.AuthRequest) (storage.AuthRequest, error)) error {
	ret := _mock.Called(ctx, id, updater)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuthRequest")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, func(a storage.AuthRequest) (storage.AuthRequest, error)) error); ok {
		r0 = returnFunc(ctx, id, updater)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_UpdateAuthRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuthRequest'
type MockStorage_UpdateAuthRequest_Call struct {
	*mock.Call
}

// UpdateAuthRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - updater func(a storage.AuthRequest) (storage.AuthRequest, error)
func (_e *MockStorage_Expecter) UpdateAuthRequest(ctx interface{}, id interface{}, updater interface{}) *MockStorage_UpdateAuthRequest_Call {
	return &MockStorage_UpdateAuthRequest_Call{Call: _e.mock.On("UpdateAuthRequest", ctx, id, updater)}
}

func (_c *MockStorage_UpdateAuthRequest_Call) Run(run func(ctx context.Context, id string, updater func(a storage.AuthRequest) (storage.AuthRequest, error))) *MockStorage_UpdateAuthRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 func(a storage.AuthRequest) (storage.AuthRequest, error)
		if args[2] != nil {
			arg2 = args[2].(func(a storage.AuthRequest) (storage.AuthRequest, error))
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorage_UpdateAuthRequest_Call) Return(err error) *MockStorage_UpdateAuthRequest_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_UpdateAuthRequest_Call) RunAndReturn(run func(ctx context.Context, id string, updater func(a storage.AuthRequest) (storage.AuthRequest, error)) error) *MockStorage_UpdateAuthRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClient provides a mock function for the type MockStorage
func (_mock *MockStorage) UpdateClient(ctx context.Context, id string, updater func(old storage.Client) (storage.Client, error)) error {
	ret := _mock.Called(ctx, id, updater)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClient")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, func(old storage.Client) (storage.Client, error)) error); ok {
		r0 = returnFunc(ctx, id, updater)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_UpdateClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClient'
type MockStorage_UpdateClient_Call struct {
	*mock.Call
}

// UpdateClient is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - updater func(old storage.Client) (storage.Client, error)
func (_e *MockStorage_Expecter) UpdateClient(ctx interface{}, id interface{}, updater interface{}) *MockStorage_UpdateClient_Call {
	return &MockStorage_UpdateClient_Call{Call: _e.mock.On("UpdateClient", ctx, id, updater)}
}

func (_c *MockStorage_UpdateClient_Call) Run(run func(ctx context.Context, id string, updater func(old storage.Client) (storage.Client, error))) *MockStorage_UpdateClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 func(old storage.Client) (storage.Client, error)
		if args[2] != nil {
			arg2 = args[2].(func(old storage.Client) (storage.Client, error))
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorage_UpdateClient_Call) Return(err error) *MockStorage_UpdateClient_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_UpdateClient_Call) RunAndReturn(run func(ctx context.Context, id string, updater func(old storage.Client) (storage.Client, error)) error) *MockStorage_UpdateClient_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConnector provides a mock function for the type MockStorage
func (_mock *MockStorage) UpdateConnector(ctx context.Context, id string, updater func(c storage.Connector) (storage.Connector, error)) error {
	ret := _mock.Called(ctx, id, updater)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnector")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, func(c storage.Connector) (storage.Connector, error)) error); ok {
		r0 = returnFunc(ctx, id, updater)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_UpdateConnector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConnector'
type MockStorage_UpdateConnector_Call struct {
	*mock.Call
}

// UpdateConnector is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - updater func(c storage.Connector) (storage.Connector, error)
func (_e *MockStorage_Expecter) UpdateConnector(ctx interface{}, id interface{}, updater interface{}) *MockStorage_UpdateConnector_Call {
	return &MockStorage_UpdateConnector_Call{Call: _e.mock.On("UpdateConnector", ctx, id, updater)}
}

func (_c *MockStorage_UpdateConnector_Call) Run(run func(ctx context.Context, id string, updater func(c storage.Connector) (storage.Connector, error))) *MockStorage_UpdateConnector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 func(c storage.Connector) (storage.Connector, error)
		if args[2] != nil {
			arg2 = args[2].(func(c storage.Connector) (storage.Connector, error))
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorage_UpdateConnector_Call) Return(err error) *MockStorage_UpdateConnector_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_UpdateConnector_Call) RunAndReturn(run func(ctx context.Context, id string, updater func(c storage.Connector) (storage.Connector, error)) error) *MockStorage_UpdateConnector_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDeviceToken provides a mock function for the type MockStorage
func (_mock *MockStorage) UpdateDeviceToken(ctx context.Context, deviceCode string, updater func(t storage.DeviceToken) (storage.DeviceToken, error)) error {
	ret := _mock.Called(ctx, deviceCode, updater)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeviceToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, func(t storage.DeviceToken) (storage.DeviceToken, error)) error); ok {
		r0 = returnFunc(ctx, deviceCode, updater)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_UpdateDeviceToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDeviceToken'
type MockStorage_UpdateDeviceToken_Call struct {
	*mock.Call
}

// UpdateDeviceToken is a helper method to define mock.On call
//   - ctx context.Context
//   - deviceCode string
//   - updater func(t storage.DeviceToken) (storage.DeviceToken, error)
func (_e *MockStorage_Expecter) UpdateDeviceToken(ctx interface{}, deviceCode interface{}, updater interface{}) *MockStorage_UpdateDeviceToken_Call {
	return &MockStorage_UpdateDeviceToken_Call{Call: _e.mock.On("UpdateDeviceToken", ctx, deviceCode, updater)}
}

func (_c *MockStorage_UpdateDeviceToken_Call) Run(run func(ctx context.Context, deviceCode string, updater func(t storage.DeviceToken) (storage.DeviceToken, error))) *MockStorage_UpdateDeviceToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 func(t storage.DeviceToken) (storage.DeviceToken, error)
		if args[2] != nil {
			arg2 = args[2].(func(t storage.DeviceToken) (storage.DeviceToken, error))
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorage_UpdateDeviceToken_Call) Return(err error) *MockStorage_UpdateDeviceToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_UpdateDeviceToken_Call) RunAndReturn(run func(ctx context.Context, deviceCode string, updater func(t storage.DeviceToken) (storage.DeviceToken, error)) error) *MockStorage_UpdateDeviceToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateKeys provides a mock function for the type MockStorage
func (_mock *MockStorage) UpdateKeys(ctx context.Context, updater func(old storage.Keys) (storage.Keys, error)) error {
	ret := _mock.Called(ctx, updater)

	if len(ret) == 0 {
		panic("no return value specified for UpdateKeys")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(old storage.Keys) (storage.Keys, error)) error); ok {
		r0 = returnFunc(ctx, updater)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_UpdateKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateKeys'
type MockStorage_UpdateKeys_Call struct {
	*mock.Call
}

// UpdateKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - updater func(old storage.Keys) (storage.Keys, error)
func (_e *MockStorage_Expecter) UpdateKeys(ctx interface{}, updater interface{}) *MockStorage_UpdateKeys_Call {
	return &MockStorage_UpdateKeys_Call{Call: _e.mock.On("UpdateKeys", ctx, updater)}
}

func (_c *MockStorage_UpdateKeys_Call) Run(run func(ctx context.Context, updater func(old storage.Keys) (storage.Keys, error))) *MockStorage_UpdateKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 func(old storage.Keys) (storage.Keys, error)
		if args[1] != nil {
			arg1 = args[1].(func(old storage.Keys) (storage.Keys, error))
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_UpdateKeys_Call) Return(err error) *MockStorage_UpdateKeys_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_UpdateKeys_Call) RunAndReturn(run func(ctx context.Context, updater func(old storage.Keys) (storage.Keys, error)) error) *MockStorage_UpdateKeys_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOfflineSessions provides a mock function for the type MockStorage
func (_mock *MockStorage) UpdateOfflineSessions(ctx context.Context, userID string, connID string, updater func(s storage.OfflineSessions) (storage.OfflineSessions, error)) error {
	ret := _mock.Called(ctx, userID, connID, updater)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOfflineSessions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, func(s storage.OfflineSessions) (storage.OfflineSessions, error)) error); ok {
		r0 = returnFunc(ctx, userID, connID, updater)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_UpdateOfflineSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOfflineSessions'
type MockStorage_UpdateOfflineSessions_Call struct {
	*mock.Call
}

// UpdateOfflineSessions is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - connID string
//   - updater func(s storage.OfflineSessions) (storage.OfflineSessions, error)
func (_e *MockStorage_Expecter) UpdateOfflineSessions(ctx interface{}, userID interface{}, connID interface{}, updater interface{}) *MockStorage_UpdateOfflineSessions_Call {
	return &MockStorage_UpdateOfflineSessions_Call{Call: _e.mock.On("UpdateOfflineSessions", ctx, userID, connID, updater)}
}

func (_c *MockStorage_UpdateOfflineSessions_Call) Run(run func(ctx context.Context, userID string, connID string, updater func(s storage.OfflineSessions) (storage.OfflineSessions, error))) *MockStorage_UpdateOfflineSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 func(s storage.OfflineSessions) (storage.OfflineSessions, error)
		if args[3] != nil {
			arg3 = args[3].(func(s storage.OfflineSessions) (storage.OfflineSessions, error))
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockStorage_UpdateOfflineSessions_Call) Return(err error) *MockStorage_UpdateOfflineSessions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_UpdateOfflineSessions_Call) RunAndReturn(run func(ctx context.Context, userID string, connID string, updater func(s storage.OfflineSessions) (storage.OfflineSessions, error)) error) *MockStorage_UpdateOfflineSessions_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function for the type MockStorage
func (_mock *MockStorage) UpdatePassword(ctx context.Context, email string, updater func(p storage.Password) (storage.Password, error)) error {
	ret := _mock.Called(ctx, email, updater)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, func(p storage.Password) (storage.Password, error)) error); ok {
		r0 = returnFunc(ctx, email, updater)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type MockStorage_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - updater func(p storage.Password) (storage.Password, error)
func (_e *MockStorage_Expecter) UpdatePassword(ctx interface{}, email interface{}, updater interface{}) *MockStorage_UpdatePassword_Call {
	return &MockStorage_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, email, updater)}
}

func (_c *MockStorage_UpdatePassword_Call) Run(run func(ctx context.Context, email string, updater func(p storage.Password) (storage.Password, error))) *MockStorage_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 func(p storage.Password) (storage.Password, error)
		if args[2] != nil {
			arg2 = args[2].(func(p storage.Password) (storage.Password, error))
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorage_UpdatePassword_Call) Return(err error) *MockStorage_UpdatePassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_UpdatePassword_Call) RunAndReturn(run func(ctx context.Context, email string, updater func(p storage.Password) (storage.Password, error)) error) *MockStorage_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRefreshToken provides a mock function for the type MockStorage
func (_mock *MockStorage) UpdateRefreshToken(ctx context.Context, id string, updater func(r storage.RefreshToken) (storage.RefreshToken, error)) error {
	ret := _mock.Called(ctx, id, updater)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRefreshToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, func(r storage.RefreshToken) (storage.RefreshToken, error)) error); ok {
		r0 = returnFunc(ctx, id, updater)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_UpdateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRefreshToken'
type MockStorage_UpdateRefreshToken_Call struct {
	*mock.Call
}

// UpdateRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - updater func(r storage.RefreshToken) (storage.RefreshToken, error)
func (_e *MockStorage_Expecter) UpdateRefreshToken(ctx interface{}, id interface{}, updater interface{}) *MockStorage_UpdateRefreshToken_Call {
	return &MockStorage_UpdateRefreshToken_Call{Call: _e.mock.On("UpdateRefreshToken", ctx, id, updater)}
}

func (_c *MockStorage_UpdateRefreshToken_Call) Run(run func(ctx context.Context, id string, updater func(r storage.RefreshToken) (storage.RefreshToken, error))) *MockStorage_UpdateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 func(r storage.RefreshToken) (storage.RefreshToken, error)
		if args[2] != nil {
			arg2 = args[2].(func(r storage.RefreshToken) (storage.RefreshToken, error))
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorage_UpdateRefreshToken_Call) Return(err error) *MockStorage_UpdateRefreshToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_UpdateRefreshToken_Call) RunAndReturn(run func(ctx context.Context, id string, updater func(r storage.RefreshToken) (storage.RefreshToken, error)) error) *MockStorage_UpdateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}
