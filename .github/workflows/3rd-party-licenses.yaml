# Run it locally with act
#  1. Install act:
#     `brew install act`
#  2. Create a .secret file with the following content:
#     `GITHUB_TOKEN=your_github_token`
#  3. Create a pull_request.json file in case of a pull request with the following content:
#     `{"pull_request": {"number": <PR number>, "head": {"ref": "<PR branch name>", "sha": "PR commit sha"}, "base": {"ref": "main"}}, "repository": {"name": "greenhouse", "owner": {"login": "cloudoperators"}}}`
#  4. Run the following command:
# `act pull_request --container-architecture linux/amd64 -P default=catthehacker/ubuntu:act-latest  -j check-3rd-party-licenses -e act_pull_request.json`

name: 3rd Party License Checker

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  detect-changes:
    runs-on: [default]
    outputs:
      changes: ${{ steps.packages-filters.outputs.changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate packages filters
        run: |
          for folder in ui/*; do
            folder_name=$(basename "$folder")
            echo "$folder_name: $folder/**" >> temp_packages_filters.yaml
          done

      - uses: dorny/paths-filter@v3
        id: filters
        with:
          list-files: shell
          filters: |
            packages: ui/**

      - uses: dorny/paths-filter@v3
        id: packages-filters
        with:
          list-files: shell
          filters: temp_packages_filters.yaml

      - name: Show outputs
        run: |
          echo "====packages filter===="
          cat temp_packages_filters.yaml
          echo "========"
          echo there are changes packages: ${{ steps.filters.outputs.packages}}
          echo changed files: ${{ steps.filters.outputs.packages_files}}
          echo package changes: ${{ steps.packages-filters.outputs.changes}}          
          echo "===================="

  check-3rd-party-licenses:
    needs: detect-changes
    runs-on: [default]
    strategy:
      matrix:
        change: ${{fromJson(needs.detect-changes.outputs.changes)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Remove all dependencies to our self hosted registry (temporary do tue not access from the internet)
        run: |
          echo asset: ${{ matrix.change }}
          cd "ui/${{ matrix.change }}"
          jq '(.dependencies // {} | with_entries(select(.value | contains("https://assets.juno.global.cloud.sap") | not))) as $deps |
              (.devDependencies // {} | with_entries(select(.value | contains("https://assets.juno.global.cloud.sap") | not))) as $devDeps |
              (.peerDependencies // {} | with_entries(select(.value | contains("https://assets.juno.global.cloud.sap") | not))) as $peerDeps |
              .dependencies = $deps |
              .devDependencies = $devDeps |
              .peerDependencies = $peerDeps' package.json > temp.json && mv temp.json package.json

      - name: Install npm dependencies and check 3rd party licenses
        run: |
          echo asset: ${{ matrix.change }}
          cd "ui/${{ matrix.change }}"
          echo "====package.json===="
          cat package.json
          echo "========"
          npm i
          npm install -g license-checker-rseidelsohn
          license-checker-rseidelsohn -onlyAllow "MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause;BSD-4-Clause;CC-BY-3.0;CC-BY-4.0;BlueOak-1.0.0;CC0-1.0;0BSD;Python-2.0;BSD*;Unlicense"

# Comming soon when all dependencies are removed from our self hosted registry
# test-assets:
#   needs: check-3rd-party-licenses
#   runs-on: [default]
#   strategy:
#     matrix:
#       change: ${{fromJson(needs.detect-changes.outputs.changes)}}
#   steps:
#     - name: Checkout
#       uses: actions/checkout@v4

#     - name: Setup node
#       uses: actions/setup-node@v4
#       with:
#         node-version: "20.x"
