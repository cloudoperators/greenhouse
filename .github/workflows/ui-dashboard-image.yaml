# Run it locally with act
#  1. Install act:
#     `brew install act`
#  2. Create a .secret file with the following content:
#     `GITHUB_TOKEN=your_github_token`
#  WORKFLOW_DISPATCH
#     `act workflow_dispatch  --container-architecture linux/amd64 -P default=catthehacker/ubuntu:act-latest -W .github/workflows/ui-dashboard-image.yaml`

name: Build Greenhouse Dashborad

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
    paths:
      - ui

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: "greenhouse-dashboard"

jobs:
  build-and-push:
    name: Build&Push
    runs-on: [default]

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Docker image version
        id: create_version
        run: echo "IMAGE_TAG=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This action enables you to SIGN and VERIFY container images using cosign
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.6.0
        with:
          cosign-release: "v2.4.0"

      # Add support for more platforms with QEMU (optional)
      # QEMU is a generic and open source machine & userspace emulator and virtualizer.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up BuildKit Docker container builder to be able to build MULTI-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            # Use the version from the VERSION file
            type=raw,value=${{ env.IMAGE_TAG }},prefix=
            # Optionally include semver tags
            type=semver,pattern={{major}}.{{minor}},prefix=
            # Additional Useful Tags
            type=raw,value=${{ github.sha }}
            type=sha,enable=true,format=short,prefix=
            type=edge,branch=master
          labels: |
            org.opencontainers.image.title=Greenhouse Dashboard
            org.opencontainers.image.description=Greenhouse Dashboard is an all-in-one docker image including all dependent apps.
            org.opencontainers.image.url=https://github.com/cloudoperators/greenhouse/tree/main/ui
            org.opencontainers.image.source=https://github.com/cloudoperators/greenhouse/tree/main/ui/docker
            org.opencontainers.image.documentation=https://github.com/cloudoperators/greenhouse/tree/main/ui/docker/README.md

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: ui
          file: ui/docker/Dockerfile
          push: true
          # remove untagged images produced for multi platform builds
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: |
            linux/amd64
            linux/arm64

      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  vulnerability-scan:
    permissions:
      contents: read
      packages: read
      security-events: write

    name: Vulnerability Scan
    needs: build-and-push
    runs-on: [default]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: success()
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ignore-unfixed: true
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
