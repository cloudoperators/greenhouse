// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	client "sigs.k8s.io/controller-runtime/pkg/client"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/dexidp/dex/storage"

	v1alpha1 "github.com/cloudoperators/greenhouse/pkg/apis/greenhouse/v1alpha1"
)

// MockDexter is an autogenerated mock type for the Dexter type
type MockDexter struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *MockDexter) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUpdateConnector provides a mock function with given fields: ctx, k8sClient, org, configByte
func (_m *MockDexter) CreateUpdateConnector(ctx context.Context, k8sClient client.Client, org *v1alpha1.Organization, configByte []byte) error {
	ret := _m.Called(ctx, k8sClient, org, configByte)

	if len(ret) == 0 {
		panic("no return value specified for CreateUpdateConnector")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.Client, *v1alpha1.Organization, []byte) error); ok {
		r0 = rf(ctx, k8sClient, org, configByte)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUpdateOauth2Client provides a mock function with given fields: ctx, k8sClient, org
func (_m *MockDexter) CreateUpdateOauth2Client(ctx context.Context, k8sClient client.Client, org *v1alpha1.Organization) error {
	ret := _m.Called(ctx, k8sClient, org)

	if len(ret) == 0 {
		panic("no return value specified for CreateUpdateOauth2Client")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.Client, *v1alpha1.Organization) error); ok {
		r0 = rf(ctx, k8sClient, org)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBackend provides a mock function with no fields
func (_m *MockDexter) GetBackend() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBackend")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetStorage provides a mock function with no fields
func (_m *MockDexter) GetStorage() storage.Storage {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStorage")
	}

	var r0 storage.Storage
	if rf, ok := ret.Get(0).(func() storage.Storage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Storage)
		}
	}

	return r0
}

// NewMockDexter creates a new instance of MockDexter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDexter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDexter {
	mock := &MockDexter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
