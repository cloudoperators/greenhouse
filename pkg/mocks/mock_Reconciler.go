// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	lifecycle "github.com/cloudoperators/greenhouse/pkg/lifecycle"
	mock "github.com/stretchr/testify/mock"

	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// MockReconciler is an autogenerated mock type for the Reconciler type
type MockReconciler struct {
	mock.Mock
}

// EnsureCreated provides a mock function with given fields: _a0, _a1
func (_m *MockReconciler) EnsureCreated(_a0 context.Context, _a1 lifecycle.RuntimeObject) (reconcile.Result, lifecycle.ReconcileResult, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for EnsureCreated")
	}

	var r0 reconcile.Result
	var r1 lifecycle.ReconcileResult
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, lifecycle.RuntimeObject) (reconcile.Result, lifecycle.ReconcileResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, lifecycle.RuntimeObject) reconcile.Result); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	if rf, ok := ret.Get(1).(func(context.Context, lifecycle.RuntimeObject) lifecycle.ReconcileResult); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(lifecycle.ReconcileResult)
	}

	if rf, ok := ret.Get(2).(func(context.Context, lifecycle.RuntimeObject) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EnsureDeleted provides a mock function with given fields: _a0, _a1
func (_m *MockReconciler) EnsureDeleted(_a0 context.Context, _a1 lifecycle.RuntimeObject) (reconcile.Result, lifecycle.ReconcileResult, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for EnsureDeleted")
	}

	var r0 reconcile.Result
	var r1 lifecycle.ReconcileResult
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, lifecycle.RuntimeObject) (reconcile.Result, lifecycle.ReconcileResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, lifecycle.RuntimeObject) reconcile.Result); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	if rf, ok := ret.Get(1).(func(context.Context, lifecycle.RuntimeObject) lifecycle.ReconcileResult); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(lifecycle.ReconcileResult)
	}

	if rf, ok := ret.Get(2).(func(context.Context, lifecycle.RuntimeObject) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewMockReconciler creates a new instance of MockReconciler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReconciler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReconciler {
	mock := &MockReconciler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
