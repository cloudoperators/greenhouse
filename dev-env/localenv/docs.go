// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Greenhouse contributors
// SPDX-License-Identifier: Apache-2.0

//go:build dev

package main

import (
	"bytes"
	"fmt"
	"github.com/cloudoperators/greenhouse/pkg/cmd"
	md "github.com/nao1215/markdown"
	"github.com/spf13/cobra/doc"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"strings"
)

var removeLinks = regexp.MustCompile(`(?s)### SEE ALSO.*`)
var removeOptsInherited = regexp.MustCompile(`(?s)### Options inherited from parent commands.*`)

// auto generate dev commands documentation in greenhousectl
func main() {
	commands := cmd.GenerateDevDocs()
	docs := make([]string, 0, len(commands))
	for _, command := range commands {
		buf := new(bytes.Buffer)
		err := doc.GenMarkdownCustom(command, buf, func(s string) string { return "" })
		if err != nil {
			log.Fatalf("Error generating command docs: %s", err.Error())
		}
		if buf.Len() > 0 {
			content := buf.String()
			content = removeLinks.ReplaceAllString(content, "")
			content = removeOptsInherited.ReplaceAllString(content, "")
			docs = append(docs, content)
		}
	}
	markdown, err := generateMarkdown(strings.Join(docs, ""))
	if err != nil {
		log.Fatalf("Error generating markdown: %s", err.Error())
	}
	outputPath := getCWD()
	err = os.WriteFile(filepath.Join(outputPath, "README.md"), markdown, 0644)
	if err != nil {
		log.Fatalf("Error writing docs: %s", err.Error())
	}
}

func getCWD() string {
	// Determine the current working directory
	cwd, err := os.Getwd()
	if err != nil {
		log.Fatalf("Error getting current working directory: %s", err.Error())
	}

	// Check if the current working directory is hack/localenv
	var outputPath string
	if filepath.Base(cwd) == "localenv" && filepath.Base(filepath.Dir(cwd)) == "dev-env" {
		outputPath = cwd
	} else {
		outputPath = filepath.Join(cwd, "dev-env", "localenv")
	}
	return outputPath
}

func generateMarkdown(content string) ([]byte, error) {
	buf := new(bytes.Buffer)
	markdown := md.NewMarkdown(buf).
		H1("Setting up development environment").LF().
		PlainText("This handy CLI tool will help you to setup your development environment in no time.").
		H2("Prerequisites").
		BulletList(
			md.Link("docker", "https://docs.docker.com/get-docker/"),
			md.Link("KinD", "https://kind.sigs.k8s.io/docs/user/quick-start/"),
			md.Link("kubectl", "https://kubernetes.io/docs/tasks/tools/install-kubectl/"),
		).
		H2("Usage").LF().
		PlainTextf("You can use %s either by downloading the latest binary from %s", md.Code("greenhousectl"), md.Link("here", "https://github.com/cloudoperators/greenhouse/releases")).LF().
		PlainTextf("Or you can build it from source by running the following command: %s", md.Code("make build-cli")).LF().
		Notef("The CLI binary will be available in the %s folder", md.Code("bin")).LF().
		H2("Additional information").LF().
		PlainTextf("Charts needed for dev env setup for %s", md.Code("KinD")).LF().
		BulletList(md.Code("charts/manager"), md.Code("charts/idproxy")).LF().
		PlainText("When setting up dev env, certain resources are modified for development convenience").LF().
		PlainTextf("%s env is added to manager %s to run the manager in-cluster where only webhooks run", md.Code("WEBHOOK_ONLY=true"), md.Code("Deployment")).LF().
		PlainTextf(
			"if %s is enabled for webhooks then depending on the OS the webhook manifests are altered by removing %s and replacing it with %s, allowing you to debug the code locally",
			md.Code("DevMode"),
			md.Code("clientConfig.service"),
			md.Code("clientConfig.url"),
		).LF().
		BulletList(
			fmt.Sprintf("%s - the ipv4 addr from %s interface is used - ex: %s",
				md.Code("linux"),
				md.Code("docker0"),
				md.Code("https://172.17.0.2:9443/<path>"),
			),
			fmt.Sprintf("%s - host.docker.internal is used - ex: %s", md.Code("macOS"), md.Code("https://host.docker.internal:9443/<path>")),
			fmt.Sprintf("%s - ideally %s should work, otherwise please reach out with a contribution :heart", md.Code("windows"), md.Code("host.docker.internal")),
			fmt.Sprintf("webhook certs are generated by %s Job in-cluster and they are extracted and saved to %s",
				md.Code("charts/manager/templates/kube-webhook-certgen.yaml"),
				md.Code("/tmp/k8s-webhook-server/serving-certs"),
			),
			fmt.Sprintf("%s of the created cluster(s) are saved to %s", md.Code("kubeconfig"), md.Code("/tmp/greenhouse/<clusterName>.kubeconfig")),
		).LF().
		PlainText("Below you will find a list of commands available for dev env setup").LF().
		HorizontalRule().
		PlainText(content).
		H2("Generating Docs").
		PlainText("To generate the markdown documentation, run the following command:").
		CodeBlocks(md.SyntaxHighlightShell, "make dev-docs").
		String()
	return []byte(markdown), nil
}
